{"version":3,"sources":["Components/CreateAccountModal.jsx","Components/Welcome.jsx","Components/FriendRequestButton.jsx","Components/CreatePost.jsx","Components/EditPostModal.jsx","Components/EditReplyModal.jsx","Components/DisplayReplies.jsx","Components/EditCommentModal.jsx","Components/DisplayComments.jsx","Components/FriendPosts.jsx","Components/Home.jsx","Components/DropdownRequest.jsx","Components/FriendsList.jsx","Components/CurrentUserPosts.jsx","Components/ProfileModal.jsx","Components/Navbar.jsx","App.js","index.js"],"names":["CreateAccountModal","props","useState","success","setSuccess","username","setUsername","email","setEmail","password","setPassword","confirm","setConfirm","errors","setErrors","createAccount","a","fetch","method","body","JSON","stringify","headers","response","json","data","msg","useEffect","setTimeout","toggle","Modal","isOpen","modal","ModalHeader","ModalBody","FormGroup","Input","placeholder","name","type","value","onChange","e","target","ModalFooter","Button","color","className","onClick","map","index","Welcome","loginErrors","setLoginErros","setModal","googleLogin","window","open","loginUser","preventDefault","status","localStorage","setItem","token","location","reload","Container","Row","Col","sm","md","Form","size","FriendRequestButton","friendRequestSent","requestSent","setRequestSent","friendRequest","id","Authorization","style","fontSize","disabled","CreatePostModal","title","setTitle","description","setDescription","image","setImage","createPost","formData","FormData","alert","append","postModal","encType","Label","for","files","EditPost","post","updatePost","_id","editModal","toggleEdit","tag","height","src","alt","EditCommentModal","comments","commentIndex","reply","replyIndex","setReply","editReply","DisplayReplies","setIsOpen","comment","replies","setReplies","replyIdx","setReplyIdx","addReply","currentUser","resposne","arr","push","deleteReply","splice","InputGroup","InputGroupAddon","addonType","Card","xs","author","getIdx","CardBody","CardText","uniqid","setComment","editComment","DisplayComments","setCommentIndex","deleteComment","newComments","setComments","addComment","old","console","log","profilePic","setComents","FriendPosts","liked","like","setLike","votes","length","setVotes","setEditModal","toggleLike","likePost","unlikePost","deletePost","CardTitle","cursor","Collapse","EditPostModal","Home","posts","setPosts","nonFriends","setNonFriends","setPostModal","getNonFriends","getFriendPosts","fluid","lg","user","CardImg","request","indexOf","postByUser","postIndex","CreatePost","DropdownRequests","acceptFriendRequest","rejectFriendRequest","inverse","class","FriendsList","deleteFriend","friend","CurrentUserPosts","postId","document","getElementById","scrollIntoView","ProfileModal","setProfilePic","changePic","getPosts","toggleModal","NavBar","setFriendRequest","friendList","setFriendList","history","useHistory","getRequestUsers","getFriendList","friends","logout","mode","clear","setToken","Navbar","expand","NavbarBrand","NavbarText","NavbarToggler","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","NavItem","NavLink","DropdownRequest","App","setCurrentUser","getToken","url","urlToken","URLSearchParams","search","get","localToken","getItem","decodedToken","jwt","decode","Date","exp","now","pushState","href","split","to","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.8095c245.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  Input,\n  ModalBody,\n  FormGroup,\n  ModalFooter,\n} from \"reactstrap\";\n\nconst CreateAccountModal = (props) => {\n  const [success, setSuccess] = useState();\n  const [username, setUsername] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [confirm, setConfirm] = useState();\n  const [errors, setErrors] = useState();\n\n  //INPUT HANDLERS\n  const usernameValue = (e) => {\n    setUsername(e.target.value);\n  };\n  const emailValue = (e) => {\n    setEmail(e.target.value);\n  };\n  const passwordValue = (e) => {\n    setPassword(e.target.value);\n  };\n  const confirmValue = (e) => {\n    setConfirm(e.target.value);\n  };\n\n  //CHECK FOR ERRORS AND DISPLAY THEM OR CREATE ACCOUNT IF\n  //ALL IS VALID\n  const createAccount = async () => {\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/users/new\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          username: username,\n          email,\n          password,\n          confirm,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    if (data.errors) {\n      setErrors(data.errors);\n      //IF EMAIL OR USERNAME ARE IN USE\n    } else if (typeof data === \"string\") {\n      setErrors([{ msg: data }]);\n    } else {\n      setSuccess(true);\n    }\n  };\n\n  //CLOSE MODAL AFTER ACCOUNT CREATION\n  const closeModalAfterSucces = () => {\n    if (success) {\n      setTimeout(() => {\n        props.toggle();\n        setSuccess();\n      }, 1000);\n    }\n    setUsername(\"\");\n    setPassword(\"\");\n    setEmail(\"\");\n    setConfirm(\"\");\n    setErrors();\n  };\n\n  useEffect(() => {\n    closeModalAfterSucces();\n  }, [success]);\n\n  return (\n    <div>\n      <Modal isOpen={props.modal} toggle={props.toggle}>\n        <ModalHeader toggle={props.toggle}>Create Account</ModalHeader>\n        <ModalBody>\n          <FormGroup>\n            <Input\n              placeholder=\"Username\"\n              name=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={usernameValue}\n            ></Input>\n          </FormGroup>\n          <FormGroup>\n            <Input\n              type=\"email\"\n              value={email}\n              onChange={emailValue}\n              name=\"email\"\n              placeholder=\"Email\"\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              value={password}\n              onChange={passwordValue}\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n            ></Input>\n          </FormGroup>\n          <FormGroup>\n            <Input\n              value={confirm}\n              onChange={confirmValue}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              name=\"confirm\"\n            ></Input>\n          </FormGroup>\n          {/* SHOW SUCCESS OR ERROS ON FOOTER*/}\n          {success ? (\n            <ModalFooter>\n              <p>Account Created Succesfully!</p>\n            </ModalFooter>\n          ) : (\n            <Button\n              color=\"success\"\n              className=\"btn-block\"\n              onClick={createAccount}\n            >\n              Create\n            </Button>\n          )}\n        </ModalBody>\n        {errors ? (\n          <ModalFooter>\n            {errors.map((e, index) => {\n              return (\n                <div key={index}>\n                  <p>{e.msg}</p>\n                </div>\n              );\n            })}\n          </ModalFooter>\n        ) : null}\n      </Modal>\n    </div>\n  );\n};\n\nexport default CreateAccountModal;\n","import {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Input,\n} from \"reactstrap\";\nimport { useState } from \"react\";\nimport \"./styles.css\";\nimport CreateAccountModal from \"./CreateAccountModal\";\n\nconst Welcome = (props) => {\n  const [username, setUsername] = useState();\n  const [password, setPassword] = useState();\n  const [loginErrors, setLoginErros] = useState();\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  //INPUTS\n  const usernameValue = (e) => {\n    setUsername(e.target.value);\n  };\n\n  const passwordValue = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const googleLogin = async (e) => {\n    window.open(\n      \"https://glacial-wildwood-15974.herokuapp.com/users/google\",\n      \"_self\"\n    );\n  };\n\n  //CHECK CREDENTIALS AND LOG IN OR DISPLAY ERROR\n  const loginUser = async (e) => {\n    e.preventDefault();\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/users/login\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          username,\n          password,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const data = await response.json();\n    if (response.status === 401) {\n      setLoginErros(data);\n    } else {\n      setLoginErros();\n      localStorage.setItem(\"token\", data.token);\n      window.location.reload();\n    }\n  };\n\n  return (\n    <div className=\"welcome-container\">\n      <Container className=\"align-items-center h-75\">\n        <Row className=\"align-items-center h-75\">\n          <Col sm=\"12\" md=\"6\">\n            <h1 className=\"title  text-primary font-weight-bold\">fakebook</h1>\n            <p>Connect with your fake friends</p>\n          </Col>\n          <Col sm=\"12\" md=\"6\">\n            <Form className=\"bg-light p-3 rounded-lg\">\n              <FormGroup>\n                <Input\n                  onChange={usernameValue}\n                  className=\"form-control-lg\"\n                  placeholder=\"Username\"\n                  type=\"text\"\n                  name=\"username\"\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  onChange={passwordValue}\n                  className=\"form-control-lg\"\n                  placeholder=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                />\n              </FormGroup>\n              {loginErrors ? (\n                <FormGroup>\n                  <p>{loginErrors}</p>\n                </FormGroup>\n              ) : null}\n              <FormGroup>\n                <Button\n                  onClick={loginUser}\n                  size=\"lg\"\n                  className=\"login\"\n                  color=\"primary\"\n                >\n                  Log In\n                </Button>\n                <Button\n                  className=\"btn-danger  btn-lg d-block mt-2\"\n                  onClick={googleLogin}\n                >\n                  {\" \"}\n                  Google Log In\n                </Button>\n              </FormGroup>\n              <hr />\n              <div className=\"create\">\n                <Button\n                  size=\"lg\"\n                  color=\"success\"\n                  onClick={() => {\n                    toggle();\n                    setLoginErros();\n                  }}\n                >\n                  Create A New Account\n                </Button>\n              </div>\n            </Form>\n          </Col>\n        </Row>\n        {modal ? <CreateAccountModal modal={modal} toggle={toggle} /> : null}\n      </Container>\n    </div>\n  );\n};\n\nexport default Welcome;\n","import { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport \"./styles.css\";\n\nconst FriendRequestButton = (props) => {\n  const [requestSent, setRequestSent] = useState(props.friendRequestSent);\n\n  //SEND FRIEND REQUEST\n  const friendRequest = async () => {\n    await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n        props.id +\n        \"/request\",\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n        },\n      }\n    );\n  };\n  //TO UDPATE THE REQUEST BUTTON WITHOUT RELOADING PAGE\n  const sendRequest = () => {\n    setRequestSent(!requestSent);\n  };\n\n  return requestSent ? (\n    <Button\n      className=\"btn-sm p-0 bg-success\"\n      style={{ fontSize: \"13px\" }}\n      disabled\n    >\n      <i className=\"fas fa-user-check\"></i>\n    </Button>\n  ) : (\n    <Button\n      className=\"btn-sm p-0 bg-info\"\n      onClick={() => {\n        sendRequest();\n        friendRequest();\n      }}\n    >\n      <i className=\"fas fa-user-plus\"></i>\n    </Button>\n  );\n};\n\nexport default FriendRequestButton;\n","import {\n  Button,\n  Modal,\n  ModalHeader,\n  Input,\n  ModalBody,\n  FormGroup,\n  Form,\n  Label,\n} from \"reactstrap\";\nimport { useState } from \"react\";\n\nconst CreatePostModal = (props) => {\n  const [title, setTitle] = useState();\n  const [description, setDescription] = useState();\n  const [image, setImage] = useState();\n\n  const titleHandler = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const descriptionHanlder = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const imageHandler = (e) => {\n    setImage(e.target.files[0]);\n  };\n\n  // VALIDATE THE FIELDS AND CREATES A POST\n  const createPost = async () => {\n    const formData = new FormData();\n\n    if (!description && !image) {\n      alert(\"Please add a title, description and/or an image\");\n    }\n    if (title && image && description) {\n      formData.append(\"title\", title);\n      formData.append(\"image\", image);\n      formData.append(\"body\", description);\n    } else if (title && image) {\n      formData.append(\"title\", title);\n      formData.append(\"image\", image);\n    } else if (title && description) {\n      formData.append(\"title\", title);\n      formData.append(\"body\", description);\n    }\n\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/new\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n        },\n        body: formData,\n      }\n    );\n\n    const data = await response.json();\n    if (!data.errors) {\n      props.toggle();\n      window.location.reload();\n    }\n  };\n  return (\n    <div>\n      <Modal isOpen={props.postModal} toggle={props.toggle}>\n        <ModalHeader toggle={props.toggle}>Create Post</ModalHeader>\n        <ModalBody>\n          <Form encType=\"multipart/from-data\">\n            <FormGroup>\n              <Input\n                onChange={titleHandler}\n                placeholder=\"Post Title\"\n                type=\"text\"\n                name=\"title\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                onChange={descriptionHanlder}\n                type=\"textarea\"\n                placeholder=\"Post Description\"\n                name=\"description\"\n                value={description}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"image\">Upload Image</Label>\n              <Input onChange={imageHandler} type=\"file\" name=\"image\" />\n            </FormGroup>\n            <Button onClick={createPost} className=\"bg-primary btn-block\">\n              Create\n            </Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CreatePostModal;\n","import {\n  Button,\n  Modal,\n  ModalHeader,\n  Input,\n  ModalBody,\n  FormGroup,\n  Form,\n  Label,\n} from \"reactstrap\";\nimport { useState } from \"react\";\n\nconst EditPost = (props) => {\n  const [title, setTitle] = useState(props.post.title);\n  const [description, setDescription] = useState(props.post.body);\n  const [image, setImage] = useState(props.post.image);\n\n  const titleHandler = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const descriptionHanlder = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const imageHandler = (e) => {\n    setImage(e.target.files[0]);\n  };\n\n  //VALIDATE THE FIELS BEFORE UPDATING THE POST\n  const updatePost = async () => {\n    const formData = new FormData();\n\n    if (!description && !image) {\n      alert(\"Please add a title, description and/or an image\");\n    }\n    if (title && image && description) {\n      formData.append(\"title\", title);\n      formData.append(\"image\", image);\n      formData.append(\"body\", description);\n    } else if (title && image) {\n      formData.append(\"title\", title);\n      formData.append(\"image\", image);\n    } else if (title && description) {\n      formData.append(\"title\", title);\n      formData.append(\"body\", description);\n    }\n\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.post._id +\n        \"/edit\",\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n        },\n        body: formData,\n      }\n    );\n\n    if (response.status === 200) {\n      window.location.reload();\n    }\n  };\n  return (\n    <div>\n      <Modal isOpen={props.editModal} toggle={props.toggleEdit}>\n        <ModalHeader tag=\"h1\" toggle={props.toggleEdit}>\n          Edit Post\n        </ModalHeader>\n        <ModalBody>\n          <Form encType=\"multipart/from-data\">\n            <FormGroup>\n              <Input\n                onChange={titleHandler}\n                placeholder=\"Post Title\"\n                type=\"text\"\n                name=\"title\"\n                value={title}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                onChange={descriptionHanlder}\n                type=\"textarea\"\n                placeholder=\"Post Description\"\n                name=\"description\"\n                value={description}\n                style={{ height: \"150px\" }}\n              />\n            </FormGroup>\n            <FormGroup className=\"text-center d-flex justify-content-center  flex-column\">\n              {props.post.image ? (\n                <div>\n                  <img\n                    src={props.post.image}\n                    alt=\"post\"\n                    className=\"h-25 w-25\"\n                  />\n                  <Label for=\"image\">Upload Image</Label>\n                  <Input onChange={imageHandler} type=\"file\" name=\"image\" />\n                </div>\n              ) : null}\n            </FormGroup>\n            <Button onClick={updatePost} className=\"bg-primary btn-block\">\n              Update Post\n            </Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default EditPost;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  Input,\n  ModalBody,\n  FormGroup,\n} from \"reactstrap\";\n\nconst EditCommentModal = (props) => {\n  const [reply, setReply] = useState(\n    props.post.comments[props.commentIndex].reply[props.replyIndex].reply\n  );\n\n  const replyHandler = (e) => {\n    setReply(e.target.value);\n  };\n\n  //EDIT THE SELECTED REPLY\n  const editReply = async () => {\n    await fetch(\n      \"/posts/\" +\n        props.post._id +\n        \"https://glacial-wildwood-15974.herokuapp.com/comment/reply\",\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + props.token,\n        },\n        body: JSON.stringify({\n          reply,\n          commentIndex: props.commentIndex,\n          replyIndex: props.replyIndex,\n        }),\n      }\n    );\n    const replyArr = props.post.comments[props.commentIndex].reply;\n    replyArr[props.replyIndex].reply = reply;\n    props.toggle();\n  };\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle}>\n      <ModalHeader toggle={props.toggle}>Edit Reply</ModalHeader>\n      <ModalBody>\n        <FormGroup>\n          <Input onChange={replyHandler} name=\"reply\" value={reply} />\n          <Button\n            onClick={() => {\n              editReply();\n            }}\n            className=\"mt-2 bg-primary btn-block\"\n          >\n            Edit\n          </Button>\n        </FormGroup>\n      </ModalBody>\n    </Modal>\n  );\n};\n\nexport default EditCommentModal;\n","import {\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Button,\n  Card,\n  CardBody,\n  CardText,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport { Pencil, Trash } from \"react-bootstrap-icons\";\nimport { useState } from \"react\";\nimport EditReply from \"./EditReplyModal\";\nimport uniqid from \"uniqid\";\n\nconst DisplayReplies = (props) => {\n  const [reply, setReply] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [replies, setReplies] = useState(props.comment.reply);\n  const [replyIdx, setReplyIdx] = useState();\n\n  //TOGGLE EDIT REPLY MODAL\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n  const getIdx = (e) => {\n    setReplyIdx(e.target.id);\n  };\n\n  const replyHandler = (e) => {\n    setReply(e.target.value);\n  };\n\n  //ADD A REPLY TO A COMMENT\n  const addReply = async () => {\n    const resposne = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.post._id +\n        \"/reply\",\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          index: props.index,\n          username: props.currentUser.username,\n          reply,\n        }),\n      }\n    );\n    const data = await resposne.json();\n\n    const arr = [...replies];\n    arr.push(data);\n    setReplies(arr);\n    setReply(\"\");\n    props.comments[props.index].reply.push(data);\n  };\n\n  //DELETES A REPLY\n  const deleteReply = async (replyIndex) => {\n    const arr = [...replies];\n    arr.splice(replyIndex, 1);\n    setReplies(arr);\n    props.post.comments[props.index].reply.splice(replyIndex, 1);\n\n    await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/comment/\" +\n        props.post._id +\n        \"/reply\",\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          commentIndex: props.index,\n          replyIndex: replyIndex,\n        }),\n      }\n    );\n  };\n  return (\n    <div>\n      <InputGroup className=\"mt-2\">\n        <Input\n          name=\"reply\"\n          onChange={replyHandler}\n          placeholder=\"Reply comment\"\n          className=\"\"\n          value={reply}\n        />\n        <InputGroupAddon addonType=\"append\" className=\"\">\n          <Button onClick={addReply} className=\"btn-light\">\n            <i className=\"far fa-paper-plane\"></i>\n          </Button>\n        </InputGroupAddon>\n      </InputGroup>\n      {replies\n        ? replies.map((reply, replyIndex) => {\n            return (\n              <div key={uniqid()}>\n                <Card className=\"reply-container mt-2 mb-2 text-dark pl-1 text-left\">\n                  <Row\n                    className=\" p-1 d-flex align-items-center \n                  w-100 \"\n                  >\n                    <Col className=\"col-md-9 \" sm=\"9\" xs=\"8\">\n                      <h5>{reply.username}</h5>\n                    </Col>\n                    {/* IF THE CURRENT USER IS THE AUTHOR OF THE REPLY, DISPLAY BUTTONS TO\n                EDIT OR DELETE THE REPLY */}\n                    {props.currentUser._id === reply.author ? (\n                      <Col\n                        md={2}\n                        sm={1}\n                        xs={3}\n                        className=\"d-flex justify-content-start align-items-center\"\n                      >\n                        <p size={\"sm\"} className=\"text-right btn mr-1\">\n                          <Trash\n                            onClick={() => {\n                              deleteReply(replyIndex);\n                            }}\n                          />\n                        </p>\n                        <p size={\"sm\"} className=\"text-right btn mr-1\">\n                          <Pencil\n                            onClick={(e) => {\n                              toggle();\n                              getIdx(e);\n                            }}\n                            id={replyIndex}\n                          />\n                        </p>\n                      </Col>\n                    ) : null}\n                  </Row>\n                  <CardBody className=\" p-1\">\n                    <CardText>{reply.reply}</CardText>\n                  </CardBody>\n                </Card>\n              </div>\n            );\n          })\n        : null}\n      {isOpen ? (\n        <EditReply\n          toggle={toggle}\n          isOpen={isOpen}\n          token={props.token}\n          commentIndex={props.index}\n          replyIndex={replyIdx}\n          reply={reply.reply}\n          post={props.post}\n          replies={replies}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default DisplayReplies;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  Input,\n  ModalBody,\n  FormGroup,\n} from \"reactstrap\";\n\nconst EditCommentModal = (props) => {\n  const [comment, setComment] = useState(\n    props.post.comments[props.commentIndex].comment\n  );\n\n  const commentHandler = (e) => {\n    setComment(e.target.value);\n  };\n\n  //EDIT THE SELECTED COMMENT\n  const editComment = async () => {\n    await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/comment/\" +\n        props.post._id,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + props.token,\n        },\n        body: JSON.stringify({\n          comment,\n          index: props.commentIndex,\n        }),\n      }\n    );\n    const commentsArr = props.comments;\n    commentsArr[props.commentIndex].comment = comment;\n    props.setIsOpen(!props.isOpen);\n  };\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle}>\n      <ModalHeader toggle={props.toggle}>Edit Comment</ModalHeader>\n      <ModalBody>\n        <FormGroup>\n          <Input onChange={commentHandler} name=\"comment\" value={comment} />\n          <Button\n            onClick={() => {\n              editComment();\n            }}\n            className=\"mt-2 bg-primary btn-block\"\n          >\n            Edit\n          </Button>\n        </FormGroup>\n      </ModalBody>\n    </Modal>\n  );\n};\n\nexport default EditCommentModal;\n","import {\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Button,\n  Card,\n  CardBody,\n  CardText,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport { Pencil, Trash } from \"react-bootstrap-icons\";\nimport { useState } from \"react\";\nimport DisplayReplies from \"./DisplayReplies\";\nimport EditCommentModal from \"./EditCommentModal\";\nimport uniqid from \"uniqid\";\n\nconst DisplayComments = (props) => {\n  const [comment, setComment] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [commentIndex, setCommentIndex] = useState();\n\n  //TOGGLE THE EDIT COMMENT MODAL\n  const toggle = (e) => {\n    setCommentIndex(e.target.id);\n    setIsOpen(!isOpen);\n  };\n\n  //DELETES A COMMENT\n  const deleteComment = async (index) => {\n    //UPDATE REACT STATE\n    const newComments = [...props.comments];\n    newComments.splice(index, 1);\n    props.setComments(newComments);\n\n    await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/comment/\" +\n        props.post._id,\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          commentIndex: index,\n        }),\n      }\n    );\n  };\n\n  const commentHandler = (e) => {\n    setComment(e.target.value);\n  };\n\n  //ADDS A COMMENT\n  const addComment = async () => {\n    let response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.post._id +\n        \"/comment\",\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          comment,\n        }),\n      }\n    );\n    let data = await response.json();\n    props.setComments((old) => [...old, data]);\n    props.post.comments.push(data);\n    console.log(props.comments);\n  };\n\n  return (\n    <div>\n      <InputGroup className=\"mt-2\">\n        <Input\n          name=\"comment\"\n          onChange={commentHandler}\n          placeholder=\"Enter comment\"\n        />\n        <InputGroupAddon addonType=\"append\">\n          <Button onClick={addComment} className=\"btn-light\">\n            <i className=\"far fa-paper-plane\"></i>\n          </Button>\n        </InputGroupAddon>\n      </InputGroup>\n      {props.comments.map((comment, index) => {\n        return (\n          <div key={uniqid()}>\n            <Card className=\"mt-2 text-dark text-left\">\n              <Row\n                className=\" p-1 d-flex align-items-center \n                  w-100 mx-auto\"\n              >\n                <Col md={1} sm=\"2\" xs=\"1\" className=\"pl-0\">\n                  <img\n                    className=\"circle-image\"\n                    src={props.currentUser.profilePic}\n                    alt=\"avatar\"\n                  />\n                </Col>\n                <Col className=\"col-md-9\" sm=\"9\" xs=\"8\">\n                  <h5>{comment.username} </h5>\n                </Col>\n                {/*IF THE CURRENT USER IS THE AUTHOR OF THE COMMENTS, DISPLAY BUTTONS\n                TO EITHER DELETE OR EDIT THE COMMENT */}\n                {props.currentUser._id === comment.author ? (\n                  <Col\n                    md={2}\n                    sm={1}\n                    xs={3}\n                    className=\"d-flex justify-content-start align-items-center\"\n                  >\n                    <p size={\"sm\"} className=\"text-right btn  \">\n                      <Trash\n                        onClick={() => {\n                          deleteComment(index);\n                        }}\n                      />\n                    </p>\n                    <p size={\"sm\"} className=\"text-right btn ml-1\">\n                      <Pencil onClick={toggle} id={index} />\n                    </p>\n                  </Col>\n                ) : null}\n              </Row>\n              <CardBody className=\" p-1\">\n                <CardText>{comment.comment}</CardText>\n              </CardBody>\n              <DisplayReplies\n                key={comment._id}\n                reply={comment.reply}\n                comment={comment}\n                comments={props.comments}\n                token={props.token}\n                index={index}\n                currentUser={props.currentUser}\n                post={props.post}\n                setComents={props.setComents}\n              />\n            </Card>\n          </div>\n        );\n      })}\n      {isOpen ? (\n        <EditCommentModal\n          isOpen={isOpen}\n          setIsOpen={setIsOpen}\n          toggle={toggle}\n          post={props.post}\n          token={props.token}\n          commentIndex={commentIndex}\n          comments={props.comments}\n          setComents={props.setComments}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default DisplayComments;\n","import {\n  Card,\n  Button,\n  CardTitle,\n  CardText,\n  Row,\n  Col,\n  Collapse,\n} from \"reactstrap\";\nimport { Chat } from \"react-bootstrap-icons\";\nimport { HandThumbsUp } from \"react-bootstrap-icons\";\nimport { HandThumbsUpFill } from \"react-bootstrap-icons\";\nimport { useState } from \"react\";\nimport EditPostModal from \"./EditPostModal\";\nimport DisplayComments from \"./DisplayComments\";\nimport uniqid from \"uniqid\";\n\nconst FriendPosts = (props) => {\n  const [like, setLike] = useState(props.liked);\n  const [votes, setVotes] = useState(props.post.votes.length);\n  const [isOpen, setIsOpen] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [comments, setComments] = useState(props.post.comments);\n\n  //TOGGLES EDIT POST MODAL\n  const toggleEdit = () => setEditModal(!editModal);\n\n  //TOGGLES THE LIKE ICON\n  const toggleLike = () => setLike(!like);\n\n  //COLLAPSE THE COMMENTS\n  const openCollapse = () => setIsOpen(!isOpen);\n\n  //LIKE A POST\n  const likePost = async () => {\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.post._id +\n        \"/like\",\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n        },\n      }\n    );\n    if (response.status === 200) {\n      setVotes(votes + 1);\n    }\n  };\n\n  //UNLIKE A POST\n  const unlikePost = async () => {\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.post._id +\n        \"/unlike\",\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n        },\n      }\n    );\n    if (response.status === 200) {\n      setVotes(votes - 1);\n    }\n  };\n\n  //DELETE A POST\n  const deletePost = async () => {\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.post._id +\n        \"/delete\",\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: \"Bearer \" + props.token,\n        },\n      }\n    );\n    if (response.status === 200) {\n      window.location.reload();\n    }\n  };\n  return (\n    <Row className=\"mb-2 mt-2\" id={props.post._id}>\n      <Col className=\"text-center\">\n        <Card body className=\"bg-dark text-light\">\n          <CardTitle tag=\"h2\" className=\"font-weigth-bold\">\n            {props.post.title}\n          </CardTitle>\n          <p className=\"text-muted\">Posted by {props.post.username}</p>\n\n          {/* CHECK IF THE POST CONTAINS AN IMAGE OR TEXT ONLY*/}\n          {props.post.body ? <CardText>{props.post.body}</CardText> : null}\n          {props.post.image ? (\n            <img\n              className=\"mb-2 post-image\"\n              src={props.post.image}\n              alt=\"Post\"\n            />\n          ) : null}\n          <div className=\" d-flex flex-row mb-2  bg- justify-content-around\">\n            <div className=\"d-flex align-content-center\">\n              {like ? (\n                <HandThumbsUpFill\n                  onClick={() => {\n                    toggleLike();\n                    unlikePost();\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                  size={25}\n                />\n              ) : (\n                <HandThumbsUp\n                  onClick={() => {\n                    toggleLike();\n                    likePost();\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                  size={25}\n                />\n              )}\n              <p className=\"pl-1 pt-1\">{votes}</p>\n            </div>\n            <div className=\"d-flex align-cotent-center\">\n              <Chat size={25} />\n              <p className=\"pl-1 pt1-\">{props.post.comments.length}</p>\n            </div>\n          </div>\n          <Button color=\"success\" onClick={openCollapse}>\n            Show Comments\n          </Button>\n          <Collapse isOpen={isOpen}>\n            <DisplayComments\n              key={uniqid()}\n              post={props.post}\n              token={props.token}\n              currentUser={props.currentUser}\n              comments={comments}\n              setComments={setComments}\n            />\n          </Collapse>\n          {/*CHECK IF THE CURRENT USER IS THE AUTHOR OF THE POST, IF SO SHOW\n          DELETE AND EDIT BUTTONS  */}\n          {props.currentUser._id === props.post.author ? (\n            <div className=\" d-flex justify-content-around\">\n              <Button onClick={toggleEdit} className=\"mt-2 btn-info\">\n                <i className=\"fas fa-pen\"></i>\n              </Button>\n              <Button onClick={deletePost} className=\"mt-2 btn-danger\">\n                <i className=\"fas fa-trash-alt\"></i>\n              </Button>\n            </div>\n          ) : null}\n        </Card>\n      </Col>\n      {editModal ? (\n        <EditPostModal\n          toggleEdit={toggleEdit}\n          editModal={editModal}\n          post={props.post}\n          token={props.token}\n        />\n      ) : null}\n    </Row>\n  );\n};\n\nexport default FriendPosts;\n","import {\n  Container,\n  Col,\n  Row,\n  Button,\n  Card,\n  CardImg,\n  CardTitle,\n} from \"reactstrap\";\nimport { useState, useEffect } from \"react\";\nimport FriendRequestButton from \"./FriendRequestButton\";\nimport CreatePostModal from \"./CreatePost\";\nimport FriendPosts from \"./FriendPosts\";\n\nconst Home = (props) => {\n  const [posts, setPosts] = useState();\n  const [nonFriends, setNonFriends] = useState();\n  const [postModal, setPostModal] = useState(false);\n\n  //TOGGLES CREATE POST MODAL\n  const toggle = () => setPostModal(!postModal);\n\n  //GET NON FRIEND USERS\n  const getNonFriends = async () => {\n    if (props.currentUser) {\n      const response = await fetch(\n        \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n          props.currentUser._id +\n          \"/all\",\n        {\n          method: \"GET\",\n        }\n      );\n      const data = await response.json();\n      setNonFriends(data);\n    }\n  };\n\n  //GET CURRENT USER & FRIENDS POST\n  const getFriendPosts = async () => {\n    if (props.currentUser) {\n      const response = await fetch(\n        \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n          props.currentUser._id +\n          \"/home\"\n      );\n      const data = await response.json();\n      setPosts(data);\n    }\n  };\n\n  useEffect(() => {\n    getNonFriends();\n    getFriendPosts();\n  }, []);\n\n  return (\n    <div className=\"home-container\">\n      <Container className=\"h-100 w-100\" fluid>\n        <Row className=\"h-100\">\n          <Col className=\" col-md-1 bg-light  d-none d-md-block\" lg=\"3\">\n            1\n          </Col>\n          <Col className=\" col-md-10\" lg=\"6\" sm=\"12\">\n            {nonFriends ? (\n              <div>\n                <p className=\"text-monospace text-center pt-2 text-dark\">\n                  <u>Users you might be interested in:</u>\n                </p>\n\n                <Row className=\"\">\n                  {nonFriends.map((user) => {\n                    return (\n                      <Col\n                        md=\"3\"\n                        sm=\"6\"\n                        xs=\"6\"\n                        className=\"mx-auto p-1\"\n                        key={user._id}\n                      >\n                        <Card className=\"rounded-5\">\n                          <CardImg\n                            className=\"bg-dark nonFriend-pics\"\n                            src={user.profilePic}\n                          />\n                          <CardTitle\n                            tag=\"p\"\n                            className=\"text-center font-italic mb-1\"\n                          >\n                            {user.username}\n                          </CardTitle>\n                          {user.request\n                            .map((e) => e.user)\n                            .indexOf(props.currentUser._id) > -1 ? (\n                            <FriendRequestButton\n                              token={props.token}\n                              friendRequestSent={true}\n                              id={user._id}\n                            />\n                          ) : (\n                            <FriendRequestButton\n                              token={props.token}\n                              friendRequestSent={false}\n                              id={user._id}\n                            />\n                          )}\n                        </Card>\n                      </Col>\n                    );\n                  })}\n                </Row>\n              </div>\n            ) : null}\n            <Button\n              className=\"btn-block rounded-5 mt-2 bg-primary x\"\n              onClick={() => {\n                toggle();\n              }}\n            >\n              Create Something\n            </Button>\n            {posts ? (\n              posts.map((postByUser, index) => {\n                return postByUser.map((post, postIndex) => {\n                  return post.votes.indexOf(props.currentUser._id) === -1 ? (\n                    <FriendPosts\n                      currentUser={props.currentUser}\n                      key={post._id}\n                      post={post}\n                      token={props.token}\n                      liked={false}\n                    />\n                  ) : (\n                    <FriendPosts\n                      currentUser={props.currentUser}\n                      key={post._id}\n                      post={post}\n                      token={props.token}\n                      liked={true}\n                    />\n                  );\n                });\n              })\n            ) : (\n              <div className=\"text-center pt-1\">\n                <p>Here you will see your fake friends activity... </p>\n                <p>if you had any!</p>\n              </div>\n            )}\n          </Col>\n          <Col className=\"col-md-1 bg-light d-none d-md-block\" lg=\"3\">\n            3{\" \"}\n          </Col>\n        </Row>\n      </Container>\n      {postModal ? (\n        <CreatePostModal\n          postModal={postModal}\n          token={props.token}\n          toggle={toggle}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Home;\n","import { Card, Button, CardTitle } from \"reactstrap\";\n\nconst DropdownRequests = (props) => {\n  //ACCEPT FRIEND REQUEST\n  const acceptFriendRequest = async () => {\n    const response = await fetch(\n      `https://glacial-wildwood-15974.herokuapp.com/users/${props.id}/accept`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          index: props.index,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      window.location.reload();\n    }\n  };\n  // DELETE FRIEND REQUEST\n  const rejectFriendRequest = async () => {\n    const response = await fetch(\n      `https://glacial-wildwood-15974.herokuapp.com/users/${props.id}/reject`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          index: props.index,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      window.location.reload();\n    }\n  };\n  return (\n    <div>\n      <Card body inverse className=\"bg-info p-0 m-1\">\n        <CardTitle tag=\"h5\" className=\" p-0 m-0 text-dark text-center\">\n          {props.user.username}\n        </CardTitle>\n        <Button onClick={acceptFriendRequest} className=\"m-1 p-0 bg-success\">\n          <i class=\"fas fa-user-plus\"></i>\n        </Button>\n        <Button onClick={rejectFriendRequest} className=\"m-1 p-0 bg-danger\">\n          <i class=\"fas fa-user-minus\"></i>\n        </Button>\n      </Card>\n    </div>\n  );\n};\n\nexport default DropdownRequests;\n","import { Card, Button, CardTitle } from \"reactstrap\";\n\nconst FriendsList = (props) => {\n  //DISPLAY FRIEND LIST WITH DELETE FRIEND BUTTON\n  const deleteFriend = async () => {\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n        props.id +\n        \"/delete\",\n      {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          index: props.index,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      window.location.reload();\n    }\n  };\n  return (\n    <div>\n      <Card body inverse className=\"bg-info p-0 m-1\">\n        <CardTitle tag=\"h5\" className=\" p-0 m-0 text-dark text-center\">\n          {props.friend.username}\n        </CardTitle>\n        <Button\n          className=\"m-1 p-0 bg-danger w-25 mx-auto\"\n          onClick={deleteFriend}\n        >\n          <i className=\"fas fa-user-minus\"></i>\n        </Button>\n      </Card>\n    </div>\n  );\n};\n\nexport default FriendsList;\n","import { Card, Button, CardTitle, CardText, Row, Col } from \"reactstrap\";\n\n//CURRENT USER POST DISPLAYED IN THE PROFILE\nconst CurrentUserPosts = (props) => {\n  const goToDiv = (postId) => {\n    const element = document.getElementById(postId);\n    element.scrollIntoView();\n  };\n  return props.posts.map((post, index) => {\n    return (\n      <Row key={post._id} className=\"mb-2\">\n        <Col className=\"text-center\">\n          <Card body className=\"bg-dark text-light\">\n            <CardTitle>{post.title}</CardTitle>\n            <Button\n              onClick={() => {\n                goToDiv(post._id);\n                props.toggle();\n              }}\n              color=\"success\"\n            >\n              Go to post\n            </Button>\n          </Card>\n        </Col>\n      </Row>\n    );\n  });\n};\n\nexport default CurrentUserPosts;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  Input,\n  ModalBody,\n  FormGroup,\n  Form,\n  Label,\n} from \"reactstrap\";\nimport CurrentUserPosts from \"./CurrentUserPosts\";\n\nconst ProfileModal = (props) => {\n  const [profilePic, setProfilePic] = useState();\n  const [posts, setPosts] = useState();\n\n  //GET THE PIC PATH WITH MULTER\n  const picHandler = (e) => {\n    setProfilePic(e.target.files[0]);\n  };\n\n  //USE FORMdaTA TO UPLOAD FILES\n  const changePic = async () => {\n    const formData = new FormData();\n    formData.append(\"profilePic\", profilePic);\n\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n        props.id +\n        \"/profile\",\n      {\n        method: \"POST\",\n        body: formData,\n      }\n    );\n    if (response.status === 200) {\n      window.location.reload();\n    }\n  };\n\n  //GET CURRENT USER POSTS\n  const getPosts = async () => {\n    const response = await fetch(\n      \"https://glacial-wildwood-15974.herokuapp.com/posts/\" +\n        props.id +\n        \"/posts\"\n    );\n    const data = await response.json();\n    if (data.length > 0) {\n      setPosts(data);\n    }\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n  return (\n    <div>\n      <Modal isOpen={props.modal} toggle={props.toggleModal}>\n        <ModalHeader toggle={props.toggleModal}>{props.username}</ModalHeader>\n        <ModalBody>\n          <img\n            src={props.user.profilePic}\n            alt=\"\"\n            className=\"mx bg-dark rounded-circle\"\n          />\n          <Form encType=\"multipart/form-data\">\n            <FormGroup className=\"text-center\">\n              <Label for=\"profilePic\">Change Avatar</Label>\n              <Input onChange={picHandler} type=\"file\" name=\"profilePic\" />\n            </FormGroup>\n            <FormGroup>\n              <Button\n                onClick={() => {\n                  changePic();\n                  props.toggleModal();\n                }}\n                className=\"bg-primary btn-block\"\n              >\n                Change\n              </Button>\n            </FormGroup>\n          </Form>\n          {posts ? (\n            <CurrentUserPosts posts={posts} toggle={props.toggleModal} />\n          ) : (\n            <p className=\"text-center\"> No post created yet</p>\n          )}\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ProfileModal;\n","import { useState, useEffect } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  NavbarText,\n} from \"reactstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport DropdownRequests from \"./DropdownRequest\";\nimport FriendsList from \"./FriendsList\";\nimport ProfileModal from \"./ProfileModal\";\n\nconst NavBar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [friendRequest, setFriendRequest] = useState();\n  const [friendList, setFriendList] = useState();\n  const [modal, setModal] = useState(false);\n\n  let history = useHistory();\n\n  //CONTROL THE DROPDOW OF THE NAVBAR ON SM DEVICES\n  const toggleDropdown = () => setIsOpen(!isOpen);\n\n  //TOGGLE THE PROFILE WINDOW\n  const toggleModal = () => setModal(!modal);\n\n  useEffect(() => {\n    //GET FRIEND REQUEST\n    const getRequestUsers = async () => {\n      const response = await fetch(\n        \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n          props.currentUser._id +\n          \"/requesting\"\n      );\n      const data = await response.json();\n      setFriendRequest(data);\n    };\n\n    //GET FRIEND LIST\n    const getFriendList = async () => {\n      const response = await fetch(\n        \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n          props.currentUser._id +\n          \"/friends\"\n      );\n      const data = await response.json();\n      setFriendList(data);\n    };\n    //CHECK IF THE USER HAVE REQUEST AND/OR FRIENDS\n    if (props.currentUser) {\n      if (props.currentUser.request.length > 0) {\n        getRequestUsers();\n      }\n      if (props.currentUser.friends.length > 0) {\n        getFriendList();\n      }\n    }\n  }, [props.currentUser]);\n\n  //LOGOUT\n  const logout = async () => {\n    await fetch(\"https://glacial-wildwood-15974.herokuapp.com/users/logout\", {\n      method: \"POST\",\n      mode: \"no-cors\",\n    });\n    localStorage.clear();\n    props.setToken();\n    history.push(\"/\");\n  };\n\n  return props.currentUser ? (\n    <div>\n      <Navbar expand=\"md\" className=\"navbar-dark bg-dark\">\n        <NavbarBrand className=\"\">\n          <img\n            className=\"profile-pic mr-2 rounded-circle\"\n            src={props.currentUser.profilePic}\n            alt=\"user profile pic\"\n            style={{ cursor: \"pointer\" }}\n            onClick={toggleModal}\n          />\n          <NavbarText className=\"mb-0\">{props.currentUser.username}</NavbarText>\n        </NavbarBrand>\n\n        <NavbarToggler onClick={toggleDropdown} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav navbar className=\"ml-auto\">\n            {friendList ? (\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Friends\n                </DropdownToggle>\n                <DropdownMenu className=\"bg-dark animate__animated animate__fadeIn \">\n                  {friendList\n                    ? friendList.map((friend, index) => {\n                        return (\n                          <FriendsList\n                            friend={friend}\n                            key={friend._id}\n                            id={props.currentUser._id}\n                            index={index}\n                          />\n                        );\n                      })\n                    : null}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            ) : (\n              <NavItem>\n                <NavLink>No Friends</NavLink>\n              </NavItem>\n            )}\n\n            {friendRequest ? (\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Requests\n                </DropdownToggle>\n                <DropdownMenu className=\"bg-dark\">\n                  {friendRequest.map((request, index) => {\n                    return (\n                      <DropdownRequests\n                        index={index}\n                        user={request}\n                        id={props.currentUser._id}\n                        key={request._id}\n                      />\n                    );\n                  })}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            ) : (\n              <NavItem>\n                <NavLink className=\"\">No Requests</NavLink>\n              </NavItem>\n            )}\n\n            <NavItem>\n              <NavLink\n                style={{ cursor: \"pointer\" }}\n                className=\"text-danger font-weight-bold\"\n                onClick={logout}\n              >\n                Log out\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n      {modal ? (\n        <ProfileModal\n          modal={modal}\n          toggleModal={toggleModal}\n          id={props.currentUser._id}\n          username={props.currentUser.username}\n          user={props.currentUser}\n        />\n      ) : null}\n    </div>\n  ) : null;\n};\n\nexport default NavBar;\n","import Welcome from \"./Components/Welcome\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport Home from \"./Components/Home\";\nimport Navbar from \"./Components/Navbar\";\nimport jwt from \"jsonwebtoken\";\nimport \"./Components/styles.css\";\n\nfunction App() {\n  const [token, setToken] = useState();\n  const [currentUser, setCurrentUser] = useState();\n\n  //GET TOKEN AND CHECK IF ITS VALID\n  const getToken = async () => {\n    let url = window.location;\n    const urlToken = new URLSearchParams(url.search).get(\"token\");\n    const localToken = localStorage.getItem(\"token\");\n    if (localToken) {\n      const decodedToken = jwt.decode(localToken);\n      const expiresAt = new Date(decodedToken.exp * 1000);\n      if (expiresAt < new Date(Date.now())) {\n        localStorage.clear();\n      } else {\n        const response = await fetch(\n          \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n            decodedToken._id +\n            \"/current\"\n        );\n        const data = await response.json();\n        setCurrentUser(data);\n        setToken(localToken);\n      }\n    }\n    //check if user is loggin with google\n    else if (urlToken) {\n      window.history.pushState({}, \"\", url.href.split(\"?\")[0]);\n      const decodedToken = jwt.decode(urlToken);\n      const expiresAt = new Date(decodedToken.exp * 1000);\n      if (expiresAt < new Date(Date.now())) {\n        localStorage.clear();\n      } else {\n        const response = await fetch(\n          \"https://glacial-wildwood-15974.herokuapp.com/users/\" +\n            decodedToken._id +\n            \"/current\"\n        );\n        const data = await response.json();\n        setCurrentUser(data);\n        setToken(urlToken);\n        localStorage.setItem(\"token\", urlToken);\n      }\n    }\n  };\n\n  useEffect(() => {\n    getToken();\n  }, [token]);\n\n  return (\n    <HashRouter>\n      {!token ? (\n        <div>\n          <Redirect to=\"/welcome\" />\n          <Welcome setToken={setToken} />\n        </div>\n      ) : (\n        <div>\n          <Redirect to=\"/home\" />{\" \"}\n        </div>\n      )}\n      <Switch>\n        <Route path=\"/welcome\">\n          <Welcome setToken={setToken} />\n        </Route>\n        <Route path=\"/home\">\n          <Navbar setToken={setToken} currentUser={currentUser} />\n          <Home currentUser={currentUser} token={token} />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}